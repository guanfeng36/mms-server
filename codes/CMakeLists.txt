cmake_minimum_required(VERSION 2.6)

PROJECT(JH_MMS)

IF(EXISTS "${PROJECT_SOURCE_DIR}/.svn/")
  INCLUDE(FindSubversion)
  Subversion_WC_INFO(${PROJECT_SOURCE_DIR} PROJECT)
ENDIF(EXISTS "${PROJECT_SOURCE_DIR}/.svn/")
SET (JH_MMS_REVISION ${PROJECT_WC_REVISION})
SET (JH_MMS_INFO ${PROJECT_WC_INFO})

#configure a header file to pass argument to source code
configure_file (
  "${PROJECT_SOURCE_DIR}/version_info.in"
  "${PROJECT_SOURCE_DIR}/version_info"
)

IF(RELEASE)
    ADD_DEFINITIONS(-DRELEASE_MODE)
    ADD_DEFINITIONS(-Wall --std=gnu99 -O2 -s)
ELSE()
    ADD_DEFINITIONS(-DDEBUG_MODE)
    ADD_DEFINITIONS(-Wall --std=gnu99 -g)
#   ADD_DEFINITIONS(-Wall --std=gnu99 -Wmissing-declarations -g -rdynamic)
ENDIF()

# if (CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
#    SET(CMAKE_INSTALL_PREFIX "/usr")
# endif()

#create bin dir
FILE(MAKE_DIRECTORY ${PROJECT_SOURCE_DIR}/bin)
FILE(MAKE_DIRECTORY ${PROJECT_SOURCE_DIR}/lib)

SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)
SET(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)
SET(CONFIGURE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/conf)

SET(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/modules)

FIND_PACKAGE(GLIB2 REQUIRED)
INCLUDE_DIRECTORIES(${GLIB2_INCLUDE_DIR})

FIND_PACKAGE(LIBCZMQ REQUIRED)
INCLUDE_DIRECTORIES(${LIBCZMQ_INCLUDE_DIR})

ADD_SUBDIRECTORY(src)
